snippet test "Test method in a unit test" !b
public function test${1:Method}()
{
    $0;
}
endsnippet

snippet fun "PHP Function" !b
/**
 * ${4:Description}
 *
 * @return ${5:null}
 */
${1:private} function $2($3)
{
    $0
}
endsnippet

snippet namespace "The PHP namespace" !b
namespace ${0:`!v substitute(strpart(expand("%:p:h"), match(expand("%:p:h"),"/src/") + 5), "/", '\\', "g")`};
endsnippet

snippet file_interface "Interface file template" !b
<?php
/**
 * Declaration of ${1:`!v expand("%:t:r")`}
 * 
 * @author `!v g:snippet_author`
 * @copyright Finanzcheck.de 2013
 */

namespace ${2:`!v substitute(strpart(expand("%:p:h"), match(expand("%:p:h"),"/src/") + 5), "/", '\\', "g")`};

/**
 * $3
 *
 * @author `!v g:snippet_author`
 */
interface $1
{

    /**
     * $5
     *
     * return $6
     */
    public function $4;

    $0
}
endsnippet

snippet file_class "Class file template" !b
<?php
/**
 * Declaration of ${1:`!v expand("%:t:r")`}
 * 
 * @author `!v g:snippet_author`
 * @copyright Finanzcheck.de 2013
 */

namespace ${2:`!v substitute(strpart(expand("%:p:h"), match(expand("%:p:h"),"/src/") + 5), "/", '\\', "g")`};

/**
 * $3
 * 
 * @author `!v g:snippet_author`
 */
class $1
{

    /**
     * 
     */
    public function __construct($4)
    {
        $0
    }
}
endsnippet

snippet file_test "PHPUnit Test case" !b
<?php
/**
 * Declaration of ${1:`!v expand("%:t:r")`}
 * 
 * @author `!v g:snippet_author`
 * @copyright Finanzcheck.de 2013
 */

namespace ${2:`!v substitute(strpart(expand("%:p:h"), match(expand("%:p:h"),"/tests/") + 7), "/", '\\', "g")`};

/**
 * Testcase for $3
 * 
 * @author `!v g:snippet_author`
 */
class $1 extends \PHPUnit_Framework_TestCase
{
    
    private $4;

    /**
     * Set up the test mocks
     */
    public function setUp()
    {
        $4 = new $0
    }
}
endsnippet

snippet getMock "Get a mock" !
\$this->getMock('$0');
endsnippet

snippet getMockBuilder "Get a mock without original constructor" !
\$this->getMockBuilder('$0')
    ->disableOriginalConstructor()
    ->getMock();
endsnippet

snippet expects "Set the expectation on a test mock" !i
expects(${1:\$this->once()})
    ->method('$2')
    ->with($3)
    ->will(\$this->returnValue($0));
endsnippet
